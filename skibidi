
#FUNCTION
from data import *

class Human(pygame.Rect):
    def __init__(self,x,y,width,height,image_list,step):
        super().__init__(x,y,width,height)
        self.image_list = image_list
        self.image = self.image_list[0]
        self.image_now = self.image
        self.image_count = 0
        self.step = step
    
    def move_image(self):
        if self.image_count == len(self.image_list * 10)- 1:
            self.image_count = 0
        if self.image_count % 10 == 0:
            self.image = self.image_list[self.image_count // 10]
        self.image_count += 1

class  Bot(Human):
    def __init__(self,x,y,width,height,image_list,step,orientation,radius = 0):
        super().__init__(x,y,width,height,image_list,step)
        self.orientation = orientation
        self.start_x = x
        self.start_y = y
        self.radius = radius
    
    def guardian(self,window):
        if self.orientation == 'vertical':
            self.y += self.step
            if self.y <  self.start_y - self.radius or self.y > self.start_y + self.radius:
                self.step *=-1
        elif self.orientation == 'horizontal':
            self.x += self.step
            if self.x <  self.start_x - self.radius or self.x > self.start_x + self.radius:
                self.step *=-1
        self.move_image()
        window.blit(self.image,(self.x,self.y))
    def striker(self,window,bullet):
        self.move_image()
        window.blit

class Bullet(pygame.Rect):
    def __init__(self,x,y,width,height,color,orientation,step,image = None):
        super().__init__(x,y,width,height)
        self.color = color
        self.image = image
        self.orientation = orientation
        self.start_x = x
        self.start_y = y
        self.step = step

    def move(self, window):
        if self.orientation == 'vertical':
            self.y += self.step
            if self.y < 0 or self.y > size_window[1] or self.collidelist(wall_list) != -1:
                self.y = self.start_y
        elif self.orientation == 'horizontal':
            self.x += self.step
            if self.x < 0 or self.x > size_window[1] or self.collidelist(wall_list) != -1:
                self.x = self.start_x
        pygame.draw.rect(window,self.color,self)


    

class  Hero(Human):
    def __init__(self,x,y,width,height,image_list,step):
        super().__init__(x,y,width,height,image_list,step)
        self.walk = {"up": False, "down": False, "left":False,"right":False}
        self.side = False
        self.hp = hp



    def move(self, window):
        if self.walk["up"] and self.y > 0:
            self.y -= self.step
            if self.collidelist(wall_list) != -1:
                self.y += self.step
        if self.walk["down"] and self.y < size_window[1]:
            self.y += self.step
            if self.collidelist(wall_list) != -1:
                self.y -= self.step
        if self.walk["left"] and self.x > 0:
            self.x -= self.step
            if self.collidelist(wall_list) != -1:
                self.x += self.step
            self.side = True
        if self.walk["right"] and self.x < size_window[0]:
            self.x += self.step
            if self.collidelist(wall_list) != -1:
                self.x -= self.step
            self.side = False

        for value in list(self.walk.values()):
            if value:
                self.move_image()
                break
        else:
            self.image = self.image_list[0]
        if self.side:
            self.image_now = pygame.transform.flip(self.image, True , False)
        else:
            self.image_now = self.image

        self.move_image()
        window.blit(self.image_now, (self.x,self.y))



class Wall(pygame.Rect):
    def __init__(self, x, y, width, height, color):
        super().__init__(x,y,width,height)
        self.color = color

def create_wall(new_map):
    x,y = 0,0
    width,height = 15,15
    for line in new_map:
        for elem in line:
            if elem == "1":
                wall_list.append(Wall(x,y,width,height,WHITE))
            x += width
        x = 0
        y += height

create_wall(maps["LVL1"]["map"])










#MAIN



from function import *

window = pygame.display.set_mode(size_window)
pygame.display.set_caption("MAZE")

clock = pygame.time.Clock()

hero =  Hero(
    10,
    10,
    size_hero[0],
    size_hero[1],
    hero_image_list,
    2
)

bot1  = Bot(
    000,
    000,
    size_hero[0],
    size_hero[1],
    hero_image_list,
    -3,
    'horizontal',
    radius = 200
    
)

bullet_7 = Bullet(bot7.x,
                  bot7.y,
                  20,20
                  BLUE,
                  bot7.orientation,
                  -5)


game = True
while game:
    events = pygame.event.get()
    window.fill(BLACK)

    #x,y = 0,0
    #for i in range(85):
    #    pygame.draw.line(window, WHITE, (0,y),(size_window[0], y))
    #    pygame.draw.line(window, WHITE, (x,0),(x,size_window[1]))
    #    x += 15
    #    y += 15
    for wall in wall_list:
        pygame.draw.rect(window,wall.color,wall)

    hero.move(window)

    for event in events:
        if event.type == pygame.QUIT:
            game = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_w:
                hero.walk["up"] = True
            if event.key == pygame.K_s:
                hero.walk["down"] = True
            if event.key == pygame.K_a:
                hero.walk["left"] = True
            if event.key == pygame.K_d:
                hero.walk["right"] = True
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_w:
                hero.walk["up"] = False
            if event.key == pygame.K_s:
                hero.walk["down"] = False
            if event.key == pygame.K_a:
                hero.walk["left"] = False
            if event.key == pygame.K_d:
                hero.walk["right"] = False


    clock.tick(FPS)
    pygame.display.flip()


    #DATA

    import pygame
import os

pygame.init()

size_window = (865,465)
size_hero = (40,40)
#78,63636363636364 15x15 79
BLACK = (0,0,0)
WHITE = (255,255,255)
FPS = 60
wall_list = list()
hp = 5


abs_path = os.path.abspath(__file__ + "/..")
hero_image_list = [
    pygame.transform.scale(pygame.image.load(os.path.join(abs_path,"image","hero0.png")),size_hero),
    pygame.transform.scale(pygame.image.load(os.path.join(abs_path,"image","hero1.png")),size_hero),
    pygame.transform.scale(pygame.image.load(os.path.join(abs_path,"image","hero2.png")),size_hero)
]



maps = {
    "LVL1":{
        "map":[
            "0000000000000000000000000000000000000001000000000000000000",
            "0000000000000000000000000000000000000001000000000000000000",
            "0000000000000000000000000000000000000001000000000000000000",
            "0000000000000000000000000000000000000001000000000000000000",
            "0000100001111110000111111111111111111111111111111100000000",
            "0000100000000010000100000000000000000001000000000000000000",
            "0000100000000010000100000000000000000001000000000000000000",
            "0000100000000010000100000000000000000001000000000000000000",
            "0000100000000010000100000000000000000001000000000000000000",
            "0000111111111111111111111100000000100001000011111100000000",
            "0000100000000000000000000100000000100001000000000100000000",
            "0000100000000000000000000100000000100001000000000100000000",
            "0000100000000000000000000100000000100001000000000100000000",
            "0000100000000000000000000100000000100001000000000100000000",
            "0000111111000010000100000111110000111111111110000111111111",
            "0000100001000010000100000000000000000000000010000000000000",
            "0000100001000010000100000000000000000000000010000000000000",
            "0000100001000010000100000000000000000000000010000000000000",
            "0000100001000010000100000000000000000000000010000000000000",
            "0000100001000011111100001000010000111111000010000000000000",
            "0000100001000010000100001000010000100000000010000000000000",
            "0000100001000010000100001000010000100000000010000000000000",
            "0000100001000010000100001000010000100000000011111111100000",
            "0000100001000010000100001000010000100000000010000000100000",
            "0000100001000010000100001000010000111111000010000000100000",
            "0000100001000010000100001000010000000001000010000000100000",
            "0000100001000010000100001000010000000001000010000000100000",
            "0000000000000010000000001000010000000001000000000000000000",
            "0000000000000010000000001000010000000001000000000000000000",
            "0000000000000010000000001000010000000001000000000000000000",
            "0000000000000010000000001000010000000001000000000000000000"
            
            
            
            
            
            
            
            ]
    }
}













